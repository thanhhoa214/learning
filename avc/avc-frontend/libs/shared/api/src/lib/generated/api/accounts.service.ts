/**
 * AVC System
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
  HttpClient,
  HttpHeaders,
  HttpParams,
  HttpResponse,
  HttpEvent,
  HttpParameterCodec
} from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { Observable } from 'rxjs';

import { AccountActivationDto } from '../model/models';
import { AccountManagedByUpdateDto } from '../model/models';
import { AccountManagerDetailReadDto } from '../model/models';
import { AccountNotManagedByReadDto } from '../model/models';
import { AccountNotManagedByReadDtoPagingResponseDto } from '../model/models';
import { AccountReadDto } from '../model/models';
import { AccountReadDtoPagingResponseDto } from '../model/models';
import { AccountStaffDetailReadDto } from '../model/models';
import { AccountUpdateDto } from '../model/models';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';
import {
  AccountsServiceInterface,
  ApiAccountsIdActivationPutRequestParams,
  ApiAccountsIdPatchRequestParams,
  ApiAccountsManagedbyPutRequestParams,
  ApiAccountsManagerIdGetRequestParams,
  ApiAccountsManagerPostRequestParams,
  ApiAccountsManagersGetRequestParams,
  ApiAccountsStaffIdGetRequestParams,
  ApiAccountsStaffPostRequestParams,
  ApiAccountsStaffsGetRequestParams
} from './accounts.serviceInterface';

@Injectable({
  providedIn: 'root'
})
export class AccountsService implements AccountsServiceInterface {
  protected basePath = 'http://localhost';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();
  public encoder: HttpParameterCodec;

  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string,
    @Optional() configuration: Configuration
  ) {
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== 'string') {
      if (typeof basePath !== 'string') {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

  private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
    if (typeof value === 'object' && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }

  private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
    if (value == null) {
      return httpParams;
    }

    if (typeof value === 'object') {
      if (Array.isArray(value)) {
        (value as any[]).forEach(
          (elem) => (httpParams = this.addToHttpParamsRecursive(httpParams, elem, key))
        );
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, (value as Date).toISOString().substr(0, 10));
        } else {
          throw Error('key may not be null if value is Date');
        }
      } else {
        Object.keys(value).forEach(
          (k) =>
            (httpParams = this.addToHttpParamsRecursive(
              httpParams,
              value[k],
              key != null ? `${key}.${k}` : k
            ))
        );
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error('key may not be null if value is not object or array');
    }
    return httpParams;
  }

  /**
   * Activate or Deactivate account
   * @param requestParameters
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiAccountsIdActivationPut(
    requestParameters: ApiAccountsIdActivationPutRequestParams,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined }
  ): Observable<any>;
  public apiAccountsIdActivationPut(
    requestParameters: ApiAccountsIdActivationPutRequestParams,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined }
  ): Observable<HttpResponse<any>>;
  public apiAccountsIdActivationPut(
    requestParameters: ApiAccountsIdActivationPutRequestParams,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined }
  ): Observable<HttpEvent<any>>;
  public apiAccountsIdActivationPut(
    requestParameters: ApiAccountsIdActivationPutRequestParams,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: undefined }
  ): Observable<any> {
    const id = requestParameters.id;
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling apiAccountsIdActivationPut.'
      );
    }
    const accountActivationDto = requestParameters.accountActivationDto;

    let headers = this.defaultHeaders;

    // authentication (Bearer) required
    if (this.configuration.apiKeys) {
      const key: string | undefined =
        this.configuration.apiKeys['Bearer'] || this.configuration.apiKeys['Authorization'];
      if (key) {
        headers = headers.set('Authorization', key);
      }
    }

    let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = [];
      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/merge-patch+json',
      'application/json-patch+json',
      'application/json',
      'text/json',
      'application/_*+json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(
      consumes
    );
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    let responseType: 'text' | 'json' = 'json';
    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
      responseType = 'text';
    }

    return this.httpClient.put<any>(
      `${this.configuration.basePath}/api/accounts/${encodeURIComponent(String(id))}/activation`,
      accountActivationDto,
      {
        responseType: <any>responseType,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Partitle update account
   * @param requestParameters
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiAccountsIdPatch(
    requestParameters: ApiAccountsIdPatchRequestParams,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined }
  ): Observable<any>;
  public apiAccountsIdPatch(
    requestParameters: ApiAccountsIdPatchRequestParams,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined }
  ): Observable<HttpResponse<any>>;
  public apiAccountsIdPatch(
    requestParameters: ApiAccountsIdPatchRequestParams,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined }
  ): Observable<HttpEvent<any>>;
  public apiAccountsIdPatch(
    requestParameters: ApiAccountsIdPatchRequestParams,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: undefined }
  ): Observable<any> {
    const id = requestParameters.id;
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling apiAccountsIdPatch.'
      );
    }
    const accountUpdateDto = requestParameters.accountUpdateDto;

    let headers = this.defaultHeaders;

    // authentication (Bearer) required
    if (this.configuration.apiKeys) {
      const key: string | undefined =
        this.configuration.apiKeys['Bearer'] || this.configuration.apiKeys['Authorization'];
      if (key) {
        headers = headers.set('Authorization', key);
      }
    }

    let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = [];
      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/merge-patch+json'];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(
      consumes
    );
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    let responseType: 'text' | 'json' = 'json';
    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
      responseType = 'text';
    }

    return this.httpClient.patch<any>(
      `${this.configuration.basePath}/api/accounts/${encodeURIComponent(String(id))}`,
      accountUpdateDto,
      {
        responseType: <any>responseType,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Assign/UnAssign Staff for Manager
   * @param requestParameters
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiAccountsManagedbyPut(
    requestParameters: ApiAccountsManagedbyPutRequestParams,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined }
  ): Observable<any>;
  public apiAccountsManagedbyPut(
    requestParameters: ApiAccountsManagedbyPutRequestParams,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined }
  ): Observable<HttpResponse<any>>;
  public apiAccountsManagedbyPut(
    requestParameters: ApiAccountsManagedbyPutRequestParams,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined }
  ): Observable<HttpEvent<any>>;
  public apiAccountsManagedbyPut(
    requestParameters: ApiAccountsManagedbyPutRequestParams,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: undefined }
  ): Observable<any> {
    const accountManagedByUpdateDto = requestParameters.accountManagedByUpdateDto;

    let headers = this.defaultHeaders;

    // authentication (Bearer) required
    if (this.configuration.apiKeys) {
      const key: string | undefined =
        this.configuration.apiKeys['Bearer'] || this.configuration.apiKeys['Authorization'];
      if (key) {
        headers = headers.set('Authorization', key);
      }
    }

    let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = [];
      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/merge-patch+json',
      'application/json-patch+json',
      'application/json',
      'text/json',
      'application/_*+json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(
      consumes
    );
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    let responseType: 'text' | 'json' = 'json';
    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
      responseType = 'text';
    }

    return this.httpClient.put<any>(
      `${this.configuration.basePath}/api/accounts/managedby`,
      accountManagedByUpdateDto,
      {
        responseType: <any>responseType,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Get Specific Account
   * @param requestParameters
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiAccountsManagerIdGet(
    requestParameters: ApiAccountsManagerIdGetRequestParams,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json' }
  ): Observable<AccountManagerDetailReadDto>;
  public apiAccountsManagerIdGet(
    requestParameters: ApiAccountsManagerIdGetRequestParams,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json' }
  ): Observable<HttpResponse<AccountManagerDetailReadDto>>;
  public apiAccountsManagerIdGet(
    requestParameters: ApiAccountsManagerIdGetRequestParams,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json' }
  ): Observable<HttpEvent<AccountManagerDetailReadDto>>;
  public apiAccountsManagerIdGet(
    requestParameters: ApiAccountsManagerIdGetRequestParams,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json' }
  ): Observable<any> {
    const id = requestParameters.id;
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling apiAccountsManagerIdGet.'
      );
    }

    let headers = this.defaultHeaders;

    // authentication (Bearer) required
    if (this.configuration.apiKeys) {
      const key: string | undefined =
        this.configuration.apiKeys['Bearer'] || this.configuration.apiKeys['Authorization'];
      if (key) {
        headers = headers.set('Authorization', key);
      }
    }

    let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['text/plain', 'application/json', 'text/json'];
      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    let responseType: 'text' | 'json' = 'json';
    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
      responseType = 'text';
    }

    return this.httpClient.get<AccountManagerDetailReadDto>(
      `${this.configuration.basePath}/api/accounts/manager/${encodeURIComponent(String(id))}`,
      {
        responseType: <any>responseType,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Create new Account
   * @param requestParameters
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiAccountsManagerPost(
    requestParameters: ApiAccountsManagerPostRequestParams,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json' }
  ): Observable<AccountNotManagedByReadDto>;
  public apiAccountsManagerPost(
    requestParameters: ApiAccountsManagerPostRequestParams,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json' }
  ): Observable<HttpResponse<AccountNotManagedByReadDto>>;
  public apiAccountsManagerPost(
    requestParameters: ApiAccountsManagerPostRequestParams,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json' }
  ): Observable<HttpEvent<AccountNotManagedByReadDto>>;
  public apiAccountsManagerPost(
    requestParameters: ApiAccountsManagerPostRequestParams,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json' }
  ): Observable<any> {
    const email = requestParameters.email;
    if (email === null || email === undefined) {
      throw new Error(
        'Required parameter email was null or undefined when calling apiAccountsManagerPost.'
      );
    }
    const firstName = requestParameters.firstName;
    if (firstName === null || firstName === undefined) {
      throw new Error(
        'Required parameter firstName was null or undefined when calling apiAccountsManagerPost.'
      );
    }
    const lastName = requestParameters.lastName;
    if (lastName === null || lastName === undefined) {
      throw new Error(
        'Required parameter lastName was null or undefined when calling apiAccountsManagerPost.'
      );
    }
    const avatarImage = requestParameters.avatarImage;
    const phone = requestParameters.phone;

    let headers = this.defaultHeaders;

    // authentication (Bearer) required
    if (this.configuration.apiKeys) {
      const key: string | undefined =
        this.configuration.apiKeys['Bearer'] || this.configuration.apiKeys['Authorization'];
      if (key) {
        headers = headers.set('Authorization', key);
      }
    }

    let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['text/plain', 'application/json', 'text/json'];
      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['multipart/form-data'];

    const canConsumeForm = this.canConsumeForm(consumes);

    let formParams: { append(param: string, value: any): any };
    let useForm = false;
    let convertFormParamsToString = false;
    // use FormData to transmit files using content-type "multipart/form-data"
    // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
    useForm = canConsumeForm;
    if (useForm) {
      formParams = new FormData();
    } else {
      formParams = new HttpParams({ encoder: this.encoder });
    }

    if (avatarImage !== undefined) {
      formParams = (formParams.append('AvatarImage', <any>avatarImage) as any) || formParams;
    }
    if (email !== undefined) {
      formParams = (formParams.append('Email', <any>email) as any) || formParams;
    }
    if (firstName !== undefined) {
      formParams = (formParams.append('FirstName', <any>firstName) as any) || formParams;
    }
    if (lastName !== undefined) {
      formParams = (formParams.append('LastName', <any>lastName) as any) || formParams;
    }
    if (phone !== undefined) {
      formParams = (formParams.append('Phone', <any>phone) as any) || formParams;
    }

    let responseType: 'text' | 'json' = 'json';
    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
      responseType = 'text';
    }

    return this.httpClient.post<AccountNotManagedByReadDto>(
      `${this.configuration.basePath}/api/accounts/manager`,
      convertFormParamsToString ? formParams.toString() : formParams,
      {
        responseType: <any>responseType,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Get List of Manager
   * @param requestParameters
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiAccountsManagersGet(
    requestParameters: ApiAccountsManagersGetRequestParams,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json' }
  ): Observable<AccountNotManagedByReadDtoPagingResponseDto>;
  public apiAccountsManagersGet(
    requestParameters: ApiAccountsManagersGetRequestParams,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json' }
  ): Observable<HttpResponse<AccountNotManagedByReadDtoPagingResponseDto>>;
  public apiAccountsManagersGet(
    requestParameters: ApiAccountsManagersGetRequestParams,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json' }
  ): Observable<HttpEvent<AccountNotManagedByReadDtoPagingResponseDto>>;
  public apiAccountsManagersGet(
    requestParameters: ApiAccountsManagersGetRequestParams,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json' }
  ): Observable<any> {
    const isAvailable = requestParameters.isAvailable;
    const page = requestParameters.page;
    const limit = requestParameters.limit;
    const searchValue = requestParameters.searchValue;

    let queryParameters = new HttpParams({ encoder: this.encoder });
    if (isAvailable !== undefined && isAvailable !== null) {
      queryParameters = this.addToHttpParams(queryParameters, <any>isAvailable, 'IsAvailable');
    }
    if (page !== undefined && page !== null) {
      queryParameters = this.addToHttpParams(queryParameters, <any>page, 'Page');
    }
    if (limit !== undefined && limit !== null) {
      queryParameters = this.addToHttpParams(queryParameters, <any>limit, 'Limit');
    }
    if (searchValue !== undefined && searchValue !== null) {
      queryParameters = this.addToHttpParams(queryParameters, <any>searchValue, 'SearchValue');
    }

    let headers = this.defaultHeaders;

    // authentication (Bearer) required
    if (this.configuration.apiKeys) {
      const key: string | undefined =
        this.configuration.apiKeys['Bearer'] || this.configuration.apiKeys['Authorization'];
      if (key) {
        headers = headers.set('Authorization', key);
      }
    }

    let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['text/plain', 'application/json', 'text/json'];
      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    let responseType: 'text' | 'json' = 'json';
    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
      responseType = 'text';
    }

    return this.httpClient.get<AccountNotManagedByReadDtoPagingResponseDto>(
      `${this.configuration.basePath}/api/accounts/managers`,
      {
        params: queryParameters,
        responseType: <any>responseType,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Get Specific Account
   * @param requestParameters
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiAccountsStaffIdGet(
    requestParameters: ApiAccountsStaffIdGetRequestParams,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json' }
  ): Observable<AccountStaffDetailReadDto>;
  public apiAccountsStaffIdGet(
    requestParameters: ApiAccountsStaffIdGetRequestParams,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json' }
  ): Observable<HttpResponse<AccountStaffDetailReadDto>>;
  public apiAccountsStaffIdGet(
    requestParameters: ApiAccountsStaffIdGetRequestParams,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json' }
  ): Observable<HttpEvent<AccountStaffDetailReadDto>>;
  public apiAccountsStaffIdGet(
    requestParameters: ApiAccountsStaffIdGetRequestParams,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json' }
  ): Observable<any> {
    const id = requestParameters.id;
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling apiAccountsStaffIdGet.'
      );
    }

    let headers = this.defaultHeaders;

    // authentication (Bearer) required
    if (this.configuration.apiKeys) {
      const key: string | undefined =
        this.configuration.apiKeys['Bearer'] || this.configuration.apiKeys['Authorization'];
      if (key) {
        headers = headers.set('Authorization', key);
      }
    }

    let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['text/plain', 'application/json', 'text/json'];
      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    let responseType: 'text' | 'json' = 'json';
    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
      responseType = 'text';
    }

    return this.httpClient.get<AccountStaffDetailReadDto>(
      `${this.configuration.basePath}/api/accounts/staff/${encodeURIComponent(String(id))}`,
      {
        responseType: <any>responseType,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Create new Account
   * @param requestParameters
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiAccountsStaffPost(
    requestParameters: ApiAccountsStaffPostRequestParams,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json' }
  ): Observable<AccountReadDto>;
  public apiAccountsStaffPost(
    requestParameters: ApiAccountsStaffPostRequestParams,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json' }
  ): Observable<HttpResponse<AccountReadDto>>;
  public apiAccountsStaffPost(
    requestParameters: ApiAccountsStaffPostRequestParams,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json' }
  ): Observable<HttpEvent<AccountReadDto>>;
  public apiAccountsStaffPost(
    requestParameters: ApiAccountsStaffPostRequestParams,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json' }
  ): Observable<any> {
    const email = requestParameters.email;
    if (email === null || email === undefined) {
      throw new Error(
        'Required parameter email was null or undefined when calling apiAccountsStaffPost.'
      );
    }
    const firstName = requestParameters.firstName;
    if (firstName === null || firstName === undefined) {
      throw new Error(
        'Required parameter firstName was null or undefined when calling apiAccountsStaffPost.'
      );
    }
    const lastName = requestParameters.lastName;
    if (lastName === null || lastName === undefined) {
      throw new Error(
        'Required parameter lastName was null or undefined when calling apiAccountsStaffPost.'
      );
    }
    const avatarImage = requestParameters.avatarImage;
    const phone = requestParameters.phone;
    const managedBy = requestParameters.managedBy;

    let headers = this.defaultHeaders;

    // authentication (Bearer) required
    if (this.configuration.apiKeys) {
      const key: string | undefined =
        this.configuration.apiKeys['Bearer'] || this.configuration.apiKeys['Authorization'];
      if (key) {
        headers = headers.set('Authorization', key);
      }
    }

    let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['text/plain', 'application/json', 'text/json'];
      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['multipart/form-data'];

    const canConsumeForm = this.canConsumeForm(consumes);

    let formParams: { append(param: string, value: any): any };
    let useForm = false;
    let convertFormParamsToString = false;
    // use FormData to transmit files using content-type "multipart/form-data"
    // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
    useForm = canConsumeForm;
    if (useForm) {
      formParams = new FormData();
    } else {
      formParams = new HttpParams({ encoder: this.encoder });
    }

    if (avatarImage !== undefined) {
      formParams = (formParams.append('AvatarImage', <any>avatarImage) as any) || formParams;
    }
    if (email !== undefined) {
      formParams = (formParams.append('Email', <any>email) as any) || formParams;
    }
    if (firstName !== undefined) {
      formParams = (formParams.append('FirstName', <any>firstName) as any) || formParams;
    }
    if (lastName !== undefined) {
      formParams = (formParams.append('LastName', <any>lastName) as any) || formParams;
    }
    if (phone !== undefined) {
      formParams = (formParams.append('Phone', <any>phone) as any) || formParams;
    }
    if (managedBy !== undefined) {
      formParams = (formParams.append('ManagedBy', <any>managedBy) as any) || formParams;
    }

    let responseType: 'text' | 'json' = 'json';
    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
      responseType = 'text';
    }

    return this.httpClient.post<AccountReadDto>(
      `${this.configuration.basePath}/api/accounts/staff`,
      convertFormParamsToString ? formParams.toString() : formParams,
      {
        responseType: <any>responseType,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Get list of staff
   * @param requestParameters
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiAccountsStaffsGet(
    requestParameters: ApiAccountsStaffsGetRequestParams,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json' }
  ): Observable<AccountReadDtoPagingResponseDto>;
  public apiAccountsStaffsGet(
    requestParameters: ApiAccountsStaffsGetRequestParams,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json' }
  ): Observable<HttpResponse<AccountReadDtoPagingResponseDto>>;
  public apiAccountsStaffsGet(
    requestParameters: ApiAccountsStaffsGetRequestParams,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json' }
  ): Observable<HttpEvent<AccountReadDtoPagingResponseDto>>;
  public apiAccountsStaffsGet(
    requestParameters: ApiAccountsStaffsGetRequestParams,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json' }
  ): Observable<any> {
    const isAvailable = requestParameters.isAvailable;
    const page = requestParameters.page;
    const limit = requestParameters.limit;
    const searchValue = requestParameters.searchValue;

    let queryParameters = new HttpParams({ encoder: this.encoder });
    if (isAvailable !== undefined && isAvailable !== null) {
      queryParameters = this.addToHttpParams(queryParameters, <any>isAvailable, 'IsAvailable');
    }
    if (page !== undefined && page !== null) {
      queryParameters = this.addToHttpParams(queryParameters, <any>page, 'Page');
    }
    if (limit !== undefined && limit !== null) {
      queryParameters = this.addToHttpParams(queryParameters, <any>limit, 'Limit');
    }
    if (searchValue !== undefined && searchValue !== null) {
      queryParameters = this.addToHttpParams(queryParameters, <any>searchValue, 'SearchValue');
    }

    let headers = this.defaultHeaders;

    // authentication (Bearer) required
    if (this.configuration.apiKeys) {
      const key: string | undefined =
        this.configuration.apiKeys['Bearer'] || this.configuration.apiKeys['Authorization'];
      if (key) {
        headers = headers.set('Authorization', key);
      }
    }

    let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['text/plain', 'application/json', 'text/json'];
      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    let responseType: 'text' | 'json' = 'json';
    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
      responseType = 'text';
    }

    return this.httpClient.get<AccountReadDtoPagingResponseDto>(
      `${this.configuration.basePath}/api/accounts/staffs`,
      {
        params: queryParameters,
        responseType: <any>responseType,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }
}
