// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model BankTransaction {
  id          Int      @id @default(autoincrement())
  amount      Float
  description String
  User        User?    @relation(fields: [userId], references: [id])
  userId      Int?
  createdAt   DateTime @default(now()) // Add createdAt field
  updatedAt   DateTime @updatedAt // Add updatedAt field
}

model Invoice {
  id          Int      @id @default(autoincrement())
  amount      Float
  description String
  dueDate     DateTime
  User        User?    @relation(fields: [userId], references: [id])
  userId      Int?
  createdAt   DateTime @default(now()) // Add createdAt field
  updatedAt   DateTime @updatedAt // Add updatedAt field
}

model User {
  id          Int      @id @default(autoincrement())
  username    String
  email       String   @unique
  password    String
  kycStatus   String // Status of KYC process
  twoFAStatus Boolean // Enable/Disable 2FA
  createdAt   DateTime @default(now()) // Add createdAt field
  updatedAt   DateTime @updatedAt // Add updatedAt field

  // Relations
  bankTransactions      BankTransaction[]
  invoices              Invoice[]
  EthereumWallet        EthereumWallet[]
  StablecoinTransaction StablecoinTransaction[]
  Notification          Notification[]
}

model EventLog {
  id        Int      @id @default(autoincrement())
  eventType String
  details   String
  createdAt DateTime @default(now()) // Add createdAt field
  updatedAt DateTime @updatedAt // Add updatedAt field
}

model EthereumWallet {
  id         Int    @id @default(autoincrement())
  address    String @unique
  privateKey String
  publicKey  String

  // Relations
  user   User @relation(fields: [userId], references: [id])
  userId Int
}

model StablecoinTransaction {
  id              Int      @id @default(autoincrement())
  amount          Float
  transactionType String // Issuance, Redemption, Transfer, etc.
  createdAt       DateTime @default(now()) // Add createdAt field
  updatedAt       DateTime @updatedAt // Add updatedAt field

  // Relations
  user   User @relation(fields: [userId], references: [id])
  userId Int
}

model Notification {
  id          Int      @id @default(autoincrement())
  message     String
  isEmailSent Boolean
  isPushSent  Boolean
  createdAt   DateTime @default(now()) // Add createdAt field
  updatedAt   DateTime @updatedAt // Add updatedAt field

  // Relations
  user   User @relation(fields: [userId], references: [id])
  userId Int
}
